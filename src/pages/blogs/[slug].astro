---
import PageLayout from '../../layout/PageLayout.astro';

// types.ts
export interface Blog {
  id: number;
  title: string;
  excerpt: string;
  image: string;
  alt: string;
  tags: string[];
  link: string;
  date: string;
  content: string; // HTML content for the blog post
  slug: string; // Unique slug for the blog post
  metaDescription: string; // SEO meta description
}

export interface BlogSection {
  title: string;
  blogs: Blog[];
}

export const blogSection: BlogSection = {
  title: 'My Blogs',
  blogs: [
    {
      id: 1,
      title: 'Building a Multiplayer Space Shooter',
      excerpt: 'Lessons learned from developing Cosmic Raiders, including networking challenges and procedural generation techniques.',
      image: '/img/blog1.jpg',
      alt: 'Multiplayer Space Shooter',
      tags: ['GameDev', 'Unity', 'Networking'],
      link: '/blogs/multiplayer-space-shooter',
      date: '2025-03-15',
      slug: 'multiplayer-space-shooter',
      metaDescription: 'Discover the challenges and solutions for building Cosmic Raiders, a multiplayer space shooter with procedural levels.',
      content: `
        <h2>Introduction</h2>
        <p>Developing <strong>Cosmic Raiders</strong> was an exciting journey into multiplayer game development. This post covers the key challenges and solutions we encountered while building a space shooter with procedurally generated levels.</p>
        <h3>Networking Challenges</h3>
        <p>One of the biggest hurdles was ensuring smooth synchronization across clients. We used Unity's Netcode for GameObjects, which required careful management of server-authoritative movement and client-side prediction.</p>
        <ul>
          <li>Implemented client-side prediction for player movement</li>
          <li>Used server reconciliation to correct desyncs</li>
          <li>Optimized network traffic with delta compression</li>
        </ul>
        <h3>Procedural Generation</h3>
        <p>To keep gameplay fresh, we implemented procedural level generation using a seed-based system. This allowed us to create varied asteroid fields and enemy spawn patterns while maintaining deterministic outcomes for fair play.</p>
        <img src="/img/blog2.jpg" alt="Procedural level example">
        <p class="text-white">This project taught us valuable lessons about balancing performance and gameplay in multiplayer environments. Stay tuned for more insights!</p>
      `,
    },
    {
      id: 2,
      title: 'Retro Aesthetics in Modern Games',
      excerpt: 'Exploring how to combine pixel art with modern lighting and physics in Football Duck.',
      image: '/img/blog2.jpg',
      alt: 'Retro Game Aesthetics',
      tags: ['Godot', 'PixelArt', 'GameDesign'],
      link: '/blogs/retro-aesthetics',
      date: '2025-02-28',
      slug: 'retro-aesthetics',
      metaDescription: 'Learn how to blend retro pixel art with modern game mechanics in Football Duck.',
      content: `
        <h2>Introduction</h2>
        <p>This post explores the art and technical challenges of blending retro pixel aesthetics with modern game mechanics in Football Duck.</p>
        <!-- Add more HTML content here -->
      `,
    },
    {
      id: 3,
      title: 'Procedural Dungeons in Pixel Dungeon',
      excerpt: 'A deep dive into the procedural generation algorithms used for dungeon layouts and enemy placement.',
      image: '/img/blog3.jpg',
      alt: 'Procedural Dungeons',
      tags: ['Godot', 'Procedural', 'Roguelike'],
      link: '/blogs/procedural-dungeons',
      date: '2025-01-20',
      slug: 'procedural-dungeons',
      metaDescription: 'Explore the procedural generation techniques used to create dynamic dungeons in Pixel Dungeon.',
      content: `
        <h2>Introduction</h2>
        <p>Learn how we built dynamic dungeons for Pixel Dungeon using procedural generation techniques.</p>
        <!-- Add more HTML content here -->
      `,
    },
    {
      id: 4,
      title: 'Customizing Mechs in Unreal Engine',
      excerpt: 'How we built a modular mech customization system for Mech Warriors using Unreal Engine.',
      image: '/img/blog4.jpg',
      alt: 'Mech Customization',
      tags: ['Unreal', 'C++', '3D'],
      link: '/blogs/mech-customization',
      date: '2024-12-10',
      slug: 'mech-customization',
      metaDescription: 'Discover how we created a modular mech customization system for Mech Warriors in Unreal Engine.',
      content: `
        <h2>Introduction</h2>
        <p>Discover the modular system behind Mech Warriors' customizable mechs.</p>
        <!-- Add more HTML content here -->
      `,
    },
    {
      id: 5,
      title: 'Scaling Multiplayer in Double Dragon',
      excerpt: 'Optimizing server architecture for large-scale multiplayer battles in Double Dragon.',
      image: '/img/blog5.jpg',
      alt: 'Multiplayer Scaling',
      tags: ['Unity', 'Networking', 'Multiplayer'],
      link: '/blogs/multiplayer-scaling',
      date: '2024-11-05',
      slug: 'multiplayer-scaling',
      metaDescription: 'Learn about server optimizations for large-scale multiplayer in Double Dragon.',
      content: `
        <h2>Introduction</h2>
        <p>A look at the server optimizations for Double Dragon's multiplayer system.</p>
        <!-- Add more HTML content here -->
      `,
    },
    {
      id: 6,
      title: 'Creating Fun Characters in Games',
      excerpt: 'Designing humorous and engaging characters for Fun Fun Fun, with tips for animation and personality.',
      image: '/img/blog6.jpg',
      alt: 'Fun Characters',
      tags: ['Unity', 'Animation', 'GameDesign'],
      link: '/blogs/fun-characters',
      date: '2024-10-15',
      slug: 'fun-characters',
      metaDescription: 'Tips for designing engaging and humorous characters in Fun Fun Fun.',
      content: `
        <h2>Introduction</h2>
        <p>Tips and tricks for creating memorable characters in Fun Fun Fun.</p>
        <!-- Add more HTML content here -->
      `,
    },
  ],
};

// getStaticPaths to generate static pages for each blog post
export async function getStaticPaths() {
  const paths = blogSection.blogs.map((item) => {
    return {
      params: { slug: item.slug },
      props: { 
        blog: item,
        title: item.title,
        description: item.metaDescription || item.excerpt,
      },
    };
  });
  
  return paths;
}

// Get props passed from getStaticPaths
const { blog, title, description } = Astro.props as { blog: Blog; title: string; description: string };
---

<PageLayout>
  <!-- Blog Detail Section -->
  <section id="blog-detail" class="bg-red-700 relative pb-16 lg:pb-20 pt-32 lg:pt-40">
    <div class="absolute inset-0 bg-grid"></div>
    <div class="absolute inset-0">
      <div class="absolute left-60 bottom-6">
        <img src="/img/mountain1.png" alt="mountain1" class="w-80">
      </div>
      <div class="absolute right-60 bottom-10">
        <img src="/img/flower.png" alt="flower" class="w-12">
      </div>
      <div class="pipe h-32 left-1/4"></div>
      <div class="pipe h-48 right-1/4"></div>
      <div class="platform w-full bottom-0 h-10"></div>
    </div>
    
    <div class="relative z-10 max-w-3xl mx-auto w-full px-4">
      <!-- Blog Header -->
      <h1 class="text-3xl md:text-4xl mb-4 text-white font-game">{blog.title}</h1>
      <p class="text-gray-300 text-sm mb-4">{blog.date}</p>
      <div class="flex flex-wrap gap-2 mb-6">
        {blog.tags.map((tag) => (
          <span class="bg-blue-500 px-2 py-1 rounded-full text-xs text-white">{tag}</span>
        ))}
      </div>
      
      <div class="blog-card bg-red-900/60 rounded-lg overflow-hidden shadow-lg backdrop-filter backdrop-blur-sm">
        <!-- Blog Image -->
        <img src={blog.image} alt={blog.alt} class="w-full h-64 md:h-96 object-cover rounded-lg mb-6" />

        <!-- Blog Content -->
        <div class="py-6 px-6 md:px-8 post-content text-white">
          <div set:html={blog.content} />
        </div>
      </div>

      <!-- Back to Blogs Link -->
      <a href="/blogs" class="inline-block mt-8 px-6 py-2 bg-red-800 text-white rounded-lg hover:bg-red-600">
        Back to Blogs
      </a>
    </div>
  </section>
</PageLayout>